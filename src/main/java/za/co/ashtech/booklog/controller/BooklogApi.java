/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.23).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package za.co.ashtech.booklog.controller;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import za.co.ashtech.booklog.model.Book;
import za.co.ashtech.booklog.model.Editing;
import za.co.ashtech.booklog.util.BookLogApiException;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-02-01T20:11:16.872Z[GMT]")
public interface BooklogApi {

    @Operation(summary = "create book", description = "Create book on system system", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "book created"),
        
        @ApiResponse(responseCode = "400", description = "invalid input, object invalid"),
        
        @ApiResponse(responseCode = "401", description = "authentication failed"),
        
        @ApiResponse(responseCode = "409", description = "an existing item already exists"),
        
        @ApiResponse(responseCode = "500", description = "error processing request") })
    @RequestMapping(value = "/v1/book",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> createBook(@Parameter(in = ParameterIn.DEFAULT, description = "Create book in catalogue", schema=@Schema()) @Valid @RequestBody Book body) throws BookLogApiException;


    @Operation(summary = "edit book", description = "Edit book on system system", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "book edited"),
        
        @ApiResponse(responseCode = "400", description = "invalid input, object invalid"),
        
        @ApiResponse(responseCode = "401", description = "authentication failed"),
        
        @ApiResponse(responseCode = "409", description = "an existing item already exists"),
        
        @ApiResponse(responseCode = "500", description = "error processing request") })
    @RequestMapping(value = "/v1/book/update/{isbn}",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> editBook(@Parameter(in = ParameterIn.PATH, description = "Unique book identifier", required=true, schema=@Schema()) @PathVariable("isbn") String isbn, @Parameter(in = ParameterIn.DEFAULT, description = "Create book in catalogue", schema=@Schema()) @Valid @RequestBody Editing body)throws BookLogApiException;

    @Operation(summary = "delete book", description = "Delete book on system system", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "book deleted"),
        
        @ApiResponse(responseCode = "400", description = "invalid input, object invalid"),
        
        @ApiResponse(responseCode = "401", description = "authentication failed"),
        
        @ApiResponse(responseCode = "404", description = "item not found."),
        
        @ApiResponse(responseCode = "500", description = "error processing request") })
    @RequestMapping(value = "/v1/book/delete/{isbn}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteBook(@Parameter(in = ParameterIn.PATH, description = "Unique book identifier", required=true, schema=@Schema()) @PathVariable("isbn") String isbn)throws BookLogApiException;

    @Operation(summary = "get book", description = "Get book on system system", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "book", content = @Content(schema = @Schema(implementation = Book.class))),
        
        @ApiResponse(responseCode = "400", description = "invalid input, object invalid"),
        
        @ApiResponse(responseCode = "401", description = "authentication failed"),
        
        @ApiResponse(responseCode = "404", description = "item not found."),
        
        @ApiResponse(responseCode = "500", description = "error processing request") })
    @RequestMapping(value = "/v1/book/{isbn}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Book> getBook(@Parameter(in = ParameterIn.PATH, description = "Unique book identifier", required=true, schema=@Schema()) @PathVariable("isbn") String isbn)throws BookLogApiException;

}

